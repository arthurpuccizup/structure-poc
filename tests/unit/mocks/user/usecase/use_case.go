// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	errors "poc/internal/errors"
	domain "poc/internal/user/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UseCase) Delete(id uuid.UUID) errors.Error {
	ret := _m.Called(id)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(uuid.UUID) errors.Error); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *UseCase) FindAll() ([]domain.User, errors.Error) {
	ret := _m.Called()

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func() errors.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *UseCase) GetByID(id uuid.UUID) (domain.User, errors.Error) {
	ret := _m.Called(id)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(uuid.UUID) errors.Error); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *UseCase) Save(user domain.User) (domain.User, errors.Error) {
	ret := _m.Called(user)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(domain.User) errors.Error); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, user
func (_m *UseCase) Update(id uuid.UUID, user domain.User) (domain.User, errors.Error) {
	ret := _m.Called(id, user)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(uuid.UUID, domain.User) domain.User); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(uuid.UUID, domain.User) errors.Error); ok {
		r1 = rf(id, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}
