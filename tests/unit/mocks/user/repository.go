// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "poc/internal/user/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]models.User, error) {
	ret := _m.Called()

	var r0 []models.User
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllCustom provides a mock function with given fields:
func (_m *Repository) FindAllCustom() ([]models.User, error) {
	ret := _m.Called()

	var r0 []models.User
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id uuid.UUID) (models.User, error) {
	ret := _m.Called(id)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *Repository) Save(_a0 models.User) (models.User, error) {
	ret := _m.Called(_a0)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, _a1
func (_m *Repository) Update(id uuid.UUID, _a1 models.User) (models.User, error) {
	ret := _m.Called(id, _a1)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.User) models.User); ok {
		r0 = rf(id, _a1)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, models.User) error); ok {
		r1 = rf(id, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
